---

- name: "Find current, region-specific Windows AMI."
  ec2_ami_info:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region }}"
    filters:
      name: "{{ ami_name }}"
  register: found_amis

- name: "Set AMI value"
  set_fact:
    win_ami: "{{ found_amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}"
  when: found_amis.images is defined

- name: "Create security group for WinRM and RDP."
  ec2_group:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    name: "WinRM RDP"
    description: "Inbound WinRM and RDP"
    region: "{{ aws_region }}"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      from_port: 80
      to_port: 80
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      from_port: 5986
      to_port: 5986
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      from_port: 3389
      to_port: 3389
      cidr_ip: 0.0.0.0/0
  register: security_group

- name: "Start Windows instances."
  ec2:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    key_name: "ansible-aws-demo"
    region: "{{ aws_region }}"
    image: "{{ win_ami.image_id }}"
    instance_type: "{{ instance_type }}"
    group_id: "{{ security_group.group_id }}"
    wait: yes
    wait_timeout: 500
    exact_count: 1
    count_tag:
      Name: ansible-managed
    instance_tags:
      Name: ansible-managed
      Role: iis_webapp
    user_data: "{{ lookup('template', '{{ role_path }}/templates/userdata.txt.j2') }}"
  register: ec2_result

- name: "Wait for WinRM on all hosts."
  wait_for:
    port: 5986
    host: "{{ item.public_ip }}"
    timeout: 300
  with_items: "{{ ec2_result.tagged_instances }}"
