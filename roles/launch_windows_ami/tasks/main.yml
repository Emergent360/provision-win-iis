---
- name: Get the VPC ID for {{ ec2_name_prefix }}-vpc
  ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ ec2_name_prefix }}-vpc"
    region: "{{ ec2_region }}"
  register: vpc_net_facts

- name: set ec2_vpc_id
  set_fact:
    ec2_vpc_id: "{{ vpc_net_facts.vpcs[0].id }}"

- name: Get the SG ID for {{ ec2_name_prefix }}-sg
  ec2_group_info:
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
      group-name: "{{ ec2_name_prefix }}-sg"
    region: "{{ ec2_region }}"
  register: sg_net_facts

- name: debug sg_net_facts
  debug:
    var: sg_net_facts

- name: set ec2_sg_id
  set_fact:
    ec2_sg_id: "{{ sg_net_facts.security_groups[0].group_id }}"

- name: debug ec2_sg_id
  debug:
    var: ec2_sg_id

- name: Get the subnet ID for {{ ec2_name_prefix }}-subnet
  ec2_vpc_subnet_info:
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
      region: "{{ aws_region }}"
      "tag:Name": "{{ ec2_name_prefix }}-subnet"
  register: subnet_facts

- name: set vpc_subnet_id
  set_fact:
    vpc_subnet_id: "{{ subnet_facts.subnets[0].subnet_id }}"

- name: "Find current, region-specific Windows AMI."
  ec2_ami_info:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region }}"
    filters:
      name: "{{ ami_name }}"
  register: found_amis

- name: "Set AMI value"
  set_fact:
    win_ami: "{{ found_amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}"
  when: found_amis.images is defined

- name: "Start Windows instances."
  ec2:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    key_name: "ansible-aws-demo"
    region: "{{ aws_region }}"
    image: "{{ win_ami.image_id }}"
    instance_type: "{{ instance_type }}"
    group_id: "{{ ec2_sg_id }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    wait: yes
    wait_timeout: 500
    exact_count: 1
    count_tag:
      count_tag: Name
    instance_tags:
      Name: empire_iis_webapp
      Role: empire_iis_webapp
      inventory: empire
    user_data: "{{ lookup('template', '{{ role_path }}/templates/userdata.txt.j2') }}"
  register: ec2_result

- name: "Wait for WinRM on all hosts."
  wait_for:
    port: 5986
    host: "{{ item.public_ip }}"
    timeout: 300
  with_items: "{{ ec2_result.tagged_instances }}"
